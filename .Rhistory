mutate(model = "knn_class")
conf_mat_knn <- knn_class_last_fit$.predictions[[1]] %>% conf_mat(truth = Status, estimate = .pred_class)
conf_mat_knn
knn_class_tune_grid <- tibble(neighbors = 1:35 * 2 + 1)
knn_class_tune_grid
knn_tune_results <-
knn_workflow |>
tune_grid(
resamples = cv_folds,
grid = knn_class_tune_grid,
metrics = metric_set(
kap , f_meas, #all metrics as close to one as possible for good measure
bal_accuracy, accuracy, sensitivity
)
) |>
suppressWarnings()
knn_tune_metrics <-
knn_tune_results |>
collect_metrics()
knn_tune_metrics
#7. plot the metrics
knn_tune_metrics |>
ggplot(aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
facet_wrap(~.metric, scales = "free_y") +
theme_bw()
#8. best neighbors 5 options ranked byt accuracy
knn_tune_results |>
show_best("sensitivity", n = 5) |>
arrange(desc(mean), desc(neighbors))
knn_1se_model <-
knn_tune_results |>
select_by_one_std_err(metric = "sensitivity", desc(neighbors))
knn_1se_model
knn_workflow_final <-
knn_workflow |>
finalize_workflow(knn_1se_model)
knn_workflow_final
knn_class_last_fit <-
knn_workflow_final |>
last_fit(analysis_assessment_split,
metrics = metric_set(
accuracy, f_meas, kap, bal_accuracy
),
add_validation_set = TRUE
)
knn_class_metrics <-
knn_class_last_fit |>
collect_metrics()
knn_class_metrics
knn_class_metrics <- knn_class_metrics |>
select(.metric, .estimate) |>
mutate(model = "knn_class")
conf_mat_knn <- knn_class_last_fit$.predictions[[1]] %>% conf_mat(truth = Status, estimate = .pred_class)
conf_mat_knn
sensitivity_knn
precision_knn
accuracy_knn
knn_class_tune_grid <- tibble(neighbors = 1:50 * 2 + 1)
knn_class_tune_grid
knn_class_tune_grid <- tibble(neighbors = 1:45 * 2 + 1)
knn_class_tune_grid
knn_tune_results <-
knn_workflow |>
tune_grid(
resamples = cv_folds,
grid = knn_class_tune_grid,
metrics = metric_set(
kap , f_meas, #all metrics as close to one as possible for good measure
bal_accuracy, accuracy, sensitivity
)
) |>
suppressWarnings()
knn_tune_metrics <-
knn_tune_results |>
collect_metrics()
knn_tune_metrics
knn_tune_metrics |>
ggplot(aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
facet_wrap(~.metric, scales = "free_y") +
theme_bw()
knn_tune_results |>
show_best("sensitivity", n = 5) |>
arrange(desc(mean), desc(neighbors))
knn_best_model <-
knn_tune_results |>
select_best(metric = "sensitivity")
knn_best_model
knn_1se_model <-
knn_tune_results |>
select_by_one_std_err(metric = "sensitivity", desc(neighbors))
knn_workflow_final <-
knn_workflow |>
finalize_workflow(knn_1se_model)
knn_workflow_final
knn_1se_model
knn_class_last_fit <-
knn_workflow_final |>
last_fit(analysis_assessment_split,
metrics = metric_set(
accuracy, f_meas, kap, bal_accuracy
),
add_validation_set = TRUE
)
knn_class_metrics <-
knn_class_last_fit |>
collect_metrics()
knn_class_metrics
#12. put in single frame
knn_class_metrics <- knn_class_metrics |>
select(.metric, .estimate) |>
mutate(model = "knn_class")
conf_mat_knn <- knn_class_last_fit$.predictions[[1]] %>% conf_mat(truth = Status, estimate = .pred_class)
conf_mat_knn
sensitivity_knn
precision_knn
sensitivity_knn <- conf_mat_knn[1]$table %>% sensitivity()
#35: .928
precision_knn <- conf_mat_knn[1]$table %>% precision()
#35: .716
accuracy_knn <- conf_mat_knn[1]$table %>% accuracy()
sensitivity_knn
precision_knn
accuracy_knn
knn_class_tune_grid <- tibble(neighbors = 1:40 * 2 + 1)
knn_class_tune_grid
knn_tune_results <-
knn_workflow |>
tune_grid(
resamples = cv_folds,
grid = knn_class_tune_grid,
metrics = metric_set(
kap , f_meas, #all metrics as close to one as possible for good measure
bal_accuracy, accuracy, sensitivity
)
) |>
suppressWarnings()
knn_tune_metrics <-
knn_tune_results |>
collect_metrics()
knn_tune_metrics
knn_tune_metrics |>
ggplot(aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
facet_wrap(~.metric, scales = "free_y") +
theme_bw()
knn_1se_model <-
knn_tune_results |>
select_by_one_std_err(metric = "sensitivity", desc(neighbors))
knn_1se_model
knn_workflow_final <-
knn_workflow |>
finalize_workflow(knn_1se_model)
knn_workflow_final
knn_class_last_fit <-
knn_workflow_final |>
last_fit(analysis_assessment_split,
metrics = metric_set(
accuracy, f_meas, kap, bal_accuracy
),
add_validation_set = TRUE
)
knn_class_metrics <-
knn_class_last_fit |>
collect_metrics()
knn_class_metrics
knn_class_metrics <- knn_class_metrics |>
select(.metric, .estimate) |>
mutate(model = "knn_class")
conf_mat_knn <- knn_class_last_fit$.predictions[[1]] %>% conf_mat(truth = Status, estimate = .pred_class)
conf_mat_knn
sensitivity_knn <- conf_mat_knn[1]$table %>% sensitivity()
#35: .928
precision_knn <- conf_mat_knn[1]$table %>% precision()
#35: .716
accuracy_knn <- conf_mat_knn[1]$table %>% accuracy()
#35: .726
sensitivity_knn <
sensitivity_knn
sensitivity_knn <- conf_mat_knn[1]$table %>% sensitivity()
sensitivity_knn
precision_knn <- conf_mat_knn[1]$table %>% precision()
precision_knn
accuracy_knn <- conf_mat_knn[1]$table %>% accuracy()
accuracy_knn
sensitivity_knn
knn_tune_metrics |>
ggplot(aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
facet_wrap(~.metric, scales = "free_y") +
theme_bw()
library(class)
library(caret)
library(themis)
#7. plot the metrics
knn_tune_metrics |>
ggplot(aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
facet_wrap(~.metric, scales = "free_y") +
theme_bw()
knn_tune_results |>
show_best("sensitivity", n = 5) |>
arrange(desc(mean), desc(neighbors))
knn_tune_metrics |>
ggplot(aes(x = neighbors, y = sensitivity)) +
geom_point() +
geom_line() +
facet_wrap(~.metric, scales = "free_y") +
theme_bw()
knn_tune_metrics |>
ggplot(aes(x = neighbors, y = sensitivity)) +
#geom_point() +
geom_line() +
facet_wrap(~.metric, scales = "free_y") +
theme_bw()
knn_tune_metrics %>%
ggplot(aes(x = neighbors, y = sensitivity)) +
geom_point() +
geom_line() +
labs(title = "KNN Sensitivity vs. Number of Neighbors",
x = "Number of Neighbors",
y = "Sensitivity") +
theme_bw()
knn_tune_metrics %>%
ggplot(aes(x = neighbors, y = sensitivity)) +
geom_point() +
geom_line() +
labs(title = "KNN Sensitivity vs. Number of Neighbors",
x = "Number of Neighbors",
y = "Sensitivity") +
theme_bw()
library(yardstick)
library(ggplot2)
knn_tune_metrics %>%
ggplot(aes(x = neighbors, y = sensitivity)) +
geom_point() +
geom_line() +
labs(title = "KNN Sensitivity vs. Number of Neighbors",
x = "Number of Neighbors",
y = "Sensitivity") +
theme_bw()
library(class)
library(caret)
library(themis)
library(yardstick)
library(ggplot2)
knn_tune_metrics %>%
ggplot(aes(x = neighbors, y = sensitivity)) +
geom_point() +
geom_line() +
labs(title = "KNN Sensitivity vs. Number of Neighbors",
x = "Number of Neighbors",
y = "Sensitivity") +
theme_bw()
knn_tune_metrics %>%
mutate(sensitivity = as.numeric(sensitivity)) %>%
ggplot(aes(x = neighbors, y = sensitivity)) +
geom_point() +
geom_line() +
labs(title = "KNN Sensitivity vs. Number of Neighbors",
x = "Number of Neighbors",
y = "Sensitivity") +
theme_bw()
knn_tune_metrics
knn_tune_metrics |>
ggplot(aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
facet_wrap(sensitivity.metric, scales = "free_y") +
theme_bw()
knn_tune_metrics |>
ggplot(aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
facet_wrap(~.metric, scales = "free_y") +
theme_bw()
knn_tune_metrics %>%
filter(.metric == "sensitivity") %>%
ggplot(aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(title = "KNN Sensitivity vs. Number of Neighbors",
x = "Number of Neighbors",
y = "Sensitivity") +
theme_bw()
knn_1se_model
source('./data_processing.R')
load('./offers_censored.RData')
head(offers)
str(offers)
library(class)
library(caret)
library(themis)
library(yardstick)
library(ggplot2)
#checking for imbalance
offers |>
count(Status) |>
mutate(prop = n / sum(n))
#result: imbalanced set
analysis_train |>
count(Status) |>
mutate(prop = n / sum(n))
analysis_train |>
count(Status, Response) |>
group_by(Status) |>
mutate(prop = n / sum(n))
# Set up a cross-validation control
set.seed(666420)
cv_folds <- vfold_cv(analysis_train, v = 10, strata = "Status")
knn_model <-
nearest_neighbor(neighbors = tune()) |>
set_mode("classification") |>
set_engine("kknn")
knn_recipe <-
recipe(Status ~ .,
data = analysis_train) |>
#feature engineering
step_normalize(App4) |> #only integer value needed for step 5
update_role(AppDate, OfferDate, ResponseDate, new_role = "id var") |>
step_dummy(all_nominal_predictors()) |>
#removes predictors w 0 variance
step_zv(all_predictors()) |>
#counter for imbalance
themis::step_downsample(Status)
knn_recipe
knn_workflow <-
workflow() |>
add_model(knn_model) |>
add_recipe(knn_recipe)
knn_workflow
knn_class_tune_grid <- tibble(neighbors = 1:40 * 2 + 1)
knn_class_tune_grid
knn_tune_results <-
knn_workflow |>
tune_grid(
resamples = cv_folds,
grid = knn_class_tune_grid,
metrics = metric_set(
kap , f_meas, #all metrics as close to one as possible for good measure
bal_accuracy, accuracy, sensitivity
)
) |>
suppressWarnings()
knn_tune_metrics <-
knn_tune_results |>
collect_metrics()
knn_tune_metrics
knn_tune_metrics %>%
filter(.metric == "sensitivity") %>%
ggplot(aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(title = "KNN Sensitivity vs. Number of Neighbors",
x = "Number of Neighbors",
y = "Sensitivity") +
theme_bw()
knn_1se_model <-
knn_tune_results |>
select_by_one_std_err(metric = "sensitivity", desc(neighbors))
knn_1se_model
knn_1se_model <-
knn_tune_results |>
select_by_one_std_err(metric = "sensitivity", desc(neighbors))
knn_1se_model
source('./data_processing.R')
load('./offers_censored.RData')
head(offers)
str(offers)
library(class)
library(caret)
library(themis)
library(yardstick)
library(ggplot2)
#checking for imbalance
offers |>
count(Status) |>
mutate(prop = n / sum(n))
#result: imbalanced set
# Set up a cross-validation control
set.seed(666420)
cv_folds <- vfold_cv(analysis_train, v = 10, strata = "Status")
knn_model <-
nearest_neighbor(neighbors = tune()) |>
set_mode("classification") |>
set_engine("kknn")
knn_recipe <-
recipe(Status ~ .,
data = analysis_train) |>
#feature engineering
step_normalize(App4) |> #only integer value needed for step 5
update_role(AppDate, OfferDate, ResponseDate, new_role = "id var") |>
step_dummy(all_nominal_predictors()) |>
#removes predictors w 0 variance
step_zv(all_predictors()) |>
#counter for imbalance
themis::step_downsample(Status)
knn_recipe
knn_workflow <-
workflow() |>
add_model(knn_model) |>
add_recipe(knn_recipe)
knn_workflow
knn_class_tune_grid <- tibble(neighbors = 1:40 * 2 + 1)
knn_class_tune_grid
knn_tune_results <-
knn_workflow |>
tune_grid(
resamples = cv_folds,
grid = knn_class_tune_grid,
metrics = metric_set(
kap , f_meas, #all metrics as close to one as possible for good measure
bal_accuracy, accuracy, sensitivity
)
) |>
suppressWarnings()
knn_tune_metrics <-
knn_tune_results |>
collect_metrics()
knn_tune_metrics
knn_tune_metrics %>%
filter(.metric == "sensitivity") %>%
ggplot(aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(title = "KNN Sensitivity vs. Number of Neighbors",
x = "Number of Neighbors",
y = "Sensitivity") +
theme_bw()
knn_tune_metrics %>%
filter(.metric == "sensitivity") %>%
ggplot(aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(title = "KNN Sensitivity vs. Number of Neighbors",
x = "Number of Neighbors",
y = "Sensitivity") +
theme_bw()
knn_tune_metrics %>%
filter(.metric == "sensitivity") %>%
ggplot(aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(title = "KNN Sensitivity vs. Number of Neighbors",
x = "Number of Neighbors",
y = "Sensitivity") +
theme_bw()
source('./data_processing.R')
load('./offers_censored.RData')
head(offers)
str(offers)
library(class)
library(caret)
library(themis)
library(yardstick)
library(ggplot2)
source('./data_processing.R')
load('./offers_censored.RData')
head(offers)
str(offers)
library(class)
library(caret)
library(themis)
library(yardstick)
library(ggplot2)
offers |>
count(Status) |>
mutate(prop = n / sum(n))
set.seed(666420)
cv_folds <- vfold_cv(analysis_train, v = 10, strata = "Status")
knn_model <-
nearest_neighbor(neighbors = tune()) |>
set_mode("classification") |>
set_engine("kknn")
#2. recipe: normalize numeric to have mean = 0
knn_recipe <-
recipe(Status ~ .,
data = analysis_train) |>
#feature engineering
step_normalize(App4) |> #only integer value needed for step 5
update_role(AppDate, OfferDate, ResponseDate, new_role = "id var") |>
step_dummy(all_nominal_predictors()) |>
#removes predictors w 0 variance
step_zv(all_predictors()) |>
#counter for imbalance
themis::step_downsample(Status)
knn_recipe
#3. create workflow object - combine model + recipe
knn_workflow <-
workflow() |>
add_model(knn_model) |>
add_recipe(knn_recipe)
knn_workflow
knn_class_tune_grid <- tibble(neighbors = 1:40 * 2 + 1)
knn_class_tune_grid
knn_tune_results <-
knn_workflow |>
tune_grid(
resamples = cv_folds,
grid = knn_class_tune_grid,
metrics = metric_set(
kap , f_meas, #all metrics as close to one as possible for good measure
bal_accuracy, accuracy, sensitivity
)
) |>
suppressWarnings()
